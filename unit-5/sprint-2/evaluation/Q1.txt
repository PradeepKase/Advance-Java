Q1.Explain the meaning of the deadlock in multithreaded application, when it can occur in
multithreading applications.Write one example of deadlock.

if two threads are waiting for each other forever(infinite times) the Synchronized key word is the responsible for dedlock

Ex:
Class A{
public synchronized void funA(B b1){
System.out.println("inside funA of A")
 b1.fun2();
}

public synchronized void fun1(){
System.out.println("inside fun1 of A")
}
}



class B{
public synchronized void funB(A a1){
System.out.println("inside funB of B")
a1.fun1()
}
public synchronized void fun2(){
System.out.println("inside fun2 of B")
}
}

class ThreadA extends Thread{
A a1;
B b1;
public ThreadA (A a1,B b1){
this.a1=a1;
this.b1=b1;
}

@Override run(){
a1.funA(b1);
}
}

class ThreadB extends Thread{
A a1;
B b1;
public ThreadB (A a1,Bb1){
this.a1=a1;
this.b1=b1;
}

@Override run(){
b1.funB(b1);
}
}


class Main{
public static void main(str []){
A a1 =new A();
B b1= new B();

ThreadA t1= new ThreadA(a1, b1);
ThreadB t2= new ThreadB(a1,b1);
t1.strat();
t2.start();
}
}

Now this code is deadlocked, Here if we remove synchronized keyword from any classA or class B then it will not become dedlock



